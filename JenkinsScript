node('master') {
    stage ('QUIC Framework') {
        dir('../framework'){
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/angelinrashmi2000/QUIC-Test-Framework.git']]])
        }
    }

    stage ('picotls') {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/h2o/picotls.git']]])
    cmakeBuild 'InSearchPath'
    sh 'make'
    }
    stage('picoquic') {
        dir('../picoquic'){
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/private-octopus/picoquic.git']]])
        cmakeBuild 'InSearchPath'
        sh 'make'
        }
    }
    stage('quicly') {
        dir('../quicly'){
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/h2o/quicly.git']]])
        cmakeBuild 'InSearchPath'
        sh 'make'
        }
    }
    stage('mozquic') {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/mcmanus/mozquic.git']]])
        //checkout([$class: 'GitSCM', branches: [[name: '*/NSS_3_36_BRANCH']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/nss-dev/nss.git']]])
        //checkout([$class: 'MercurialSCM', credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', source: 'https://hg.mozilla.org/projects/nspr'])
        //sh 'nss/build.sh'
        //sh 'make'
    }
    stage('ngtcp2') {
        dir('../openssl')
        {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/openssl/openssl']]])
            sh './config enable-tls1_3 --prefix=$PWD/build'
            sh 'make'
            sh 'make install_sw'
        }
        dir('../ngtcp2'){
        sh 'echo $PATH'
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8607f52e-a446-45e9-b4d1-02bc8ef0ab8b', url: 'https://github.com/ngtcp2/ngtcp2']]])
        sh 'autoreconf -i'
        sh './configure PKG_CONFIG_PATH=$PWD/../openssl/build/lib/pkgconfig LDFLAGS="-Wl,-rpath,$PWD/../openssl/build/lib,-L/opt/local/lib" CPPFLAGS="-I/opt/local/include"'
        sh 'make'
        }
    }
    stage('Test'){  
        stage('Picoquic as Server'){
            dir('../picoquic') {
                sh './picoquicdemo -p 4444 &'
                sh './picoquicdemo -l picoquic-client.log  localhost 4444'
                sh 'cat picoquic-client.log'
                 dir('../quicly'){
                    try{
                    timeout(time: 2, unit: 'SECONDS') {
                        sh './cli -p /logo.jpg -v 127.0.0.1 4444 &> ../picoquic/quicly-client.log'
                        sh 'cat ../picoquic/quicly-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
                dir('../ngtcp2'){
                    try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './examples/client 127.0.0.1 4444 -d ../picoquic/http09_index.html &> ../picoquic/ngtcp2-client.log'
                        sh 'cat ../picoquic/ngtcp2-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
                sleep time: 100, unit: 'MILLISECONDS'
                sh 'kill $(lsof -t -i :4444)'
            }
        }
        stage('ngtcp2 as Server'){
            dir('../ngtcp2') {
                sh './examples/server 127.0.0.1 4444 ../picoquic/certs/key.pem ../picoquic/certs/cert.pem  &'
                sh './examples/client 127.0.0.1 4444  &> ../ngtcp2/ngtcp2-client.log'
                sh 'cat ../ngtcp2/ngtcp2-client.log'
                dir('../quicly'){
                    try{
                    timeout(time: 2, unit: 'SECONDS') {
                        sh './cli -p /logo.jpg -v 127.0.0.1 4444 &> ../ngtcp2/quicly-client.log'
                        sh 'cat ../ngtcp2/quicly-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
                dir('../picoquic') {
                    try{
                        timeout(time: 10, unit: 'SECONDS') {
                            sh './picoquicdemo -r -l ../ngtcp2/picoquic-client.log  localhost 4444'
                            sh 'cat ../ngtcp2/picoquic-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
                sleep time: 100, unit: 'MILLISECONDS'
                sh 'kill $(lsof -t -i :4444)'
            }
        }
        stage('quicky as Server')
        {
            dir('../quicly'){
                sh './cli -c ../picoquic/certs/cert.pem -k ../picoquic/certs/key.pem -v 127.0.0.1 4444 &'
                try{
                    timeout(time: 10, unit: 'SECONDS') {
                            sh './cli -p /logo.jpg -v 127.0.0.1 4444 &> quicly-client.log'
                             sh 'cat quicly-client.log'
                    }
                }
                catch(err)
                {
                    echo "Error"
                }
                dir('../picoquic') {
                    try{
                        timeout(time: 10, unit: 'SECONDS') {
                            sh './picoquicdemo -l ../quicly/picoquic-client.log  127.0.0.1 4444'
                            sh 'cat ../quicly/picoquic-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
                dir('../ngtcp2'){
                    try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './examples/client 127.0.0.1 4444 -d /logo.jpg &> ../quicly/ngtcp2-client.log'
                        sh 'cat ../quicly/ngtcp2-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
                sleep time: 100, unit: 'MILLISECONDS'
                sh 'kill $(lsof -t -i :4444)'
            }
        }
        stage('mvfst as Server')
        {
            sh  'mkdir ../mvfst'
            dir('../quicly')
            {
                try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './cli -p /99 -v fb.mvfst.net 4433 &> ../mvfst/quicly-client.log'
                        sh 'cat ../mvfst/quicly-client.log'
                    }
                }
                catch(err)
                {
                        echo "Error"
                }
            }
            dir('../picoquic')
            {
                try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './picoquicdemo -l ../mvfst/picoquic-client.log  fb.mvfst.net 4433'
                        sh 'cat ../mvfst/picoquic-client.log'
                    }
                }
                catch(err)
                {
                    echo "Error"
                }
            }
            dir('../ngtcp2'){
                    try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './examples/client fb.mvfst.net 4433 -d ../picoquic/http09_index.html &> ../mvfst/ngtcp2-client.log'
                        sh 'cat ../mvfst/ngtcp2-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
        }
        stage('winquic as Server')
        {
            sh  'mkdir ../winquic'
            dir('../quicly')
            {
                try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './cli -p /99 -v msquic.westus.cloudapp.azure.com 4433 &> ../winquic/quicly-client.log'
                        sh 'cat ../winquic/quicly-client.log'
                    }
                }
                catch(err)
                {
                        echo "Error"
                }
            }
            dir('../picoquic')
            {
                try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './picoquicdemo -l ../winquic/picoquic-client.log  msquic.westus.cloudapp.azure.com 4433'
                        sh 'cat ../winquic/picoquic-client.log'
                    }
                }
                catch(err)
                {
                    echo "Error"
                }
            }
            dir('../ngtcp2'){
                    try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './examples/client msquic.westus.cloudapp.azure.com 4433 -d ../picoquic/http09_index.html &> ../winquic/ngtcp2-client.log'
                        sh 'cat ../winquic/ngtcp2-client.log'
                    }
                    }
                    catch(err)
                    {
                        echo "Error"
                    }
                }
        }
        stage('ngx_quic as Server')
        {
            sh  'mkdir ../ngx_quic'
            dir('../quicly')
            {
                try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './cli -p /99 -v quic.tech 4433 &> ../ngx_quic/quicly-client.log'
                        sh 'cat ../ngx_quic/quicly-client.log'
                    }
                }
                catch(err)
                {
                        echo "Error"
                }
            }
            dir('../picoquic')
            {
                try{
                    timeout(time: 10, unit: 'SECONDS') {
                        sh './picoquicdemo -l ../ngx_quic/picoquic-client.log  quic.tech 4433'
                        sh 'cat ../ngx_quic/picoquic-client.log'
                    }
                }
                catch(err)
                {
                    echo "Error"
                }
            }
        }
    }
    stage('Log Analysis'){
        dir('../framework'){
            sh '/usr/local/Cellar/python/3.6.4_3/bin/python LogParser.py'
            sh 'cat result.html'
        }
    }
    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/Users/Shared/Jenkins/Home/workspace/framework', reportFiles: 'result.html', reportName: 'InterOperability Report', reportTitles: 'InterOperability Matrix'])
}
